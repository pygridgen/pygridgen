import numpy as np
import matplotlib.pyplot as plt

import numpy.testing as nptest
import nose.tools as nt

import pygridgen


class _grid_mixin(object):

    @nt.nottest
    def make_grid(self):
        grid = pygridgen.Gridgen(self.x, self.y, self.beta, self.shape,
                                 **self.options)

        return grid

    def test_x(self):
        nt.assert_true(hasattr(self.grid, 'x'))
        nptest.assert_array_almost_equal(self.grid.x, self.known_x, decimal=2)

    def test_y(self):
        nt.assert_true(hasattr(self.grid, 'y'))
        nptest.assert_array_almost_equal(self.grid.y, self.known_y, decimal=2)

    def test_x_vert(self):
        nt.assert_true(hasattr(self.grid, 'x_vert'))
        nptest.assert_array_almost_equal(self.grid.x_vert, self.known_x,
                                         decimal=2)

    def test_y_vert(self):
        nt.assert_true(hasattr(self.grid, 'y_vert'))
        nptest.assert_array_almost_equal(self.grid.y_vert, self.known_y,
                                         decimal=2)

    def test_x_psi(self):
        nt.assert_true(hasattr(self.grid, 'x_psi'))
        nptest.assert_array_almost_equal(self.grid.x_psi, self.known_x_psi,
                                         decimal=2)

    def test_y_psi(self):
        nt.assert_true(hasattr(self.grid, 'y_psi'))
        nptest.assert_array_almost_equal(self.grid.y_psi, self.known_y_psi,
                                         decimal=2)

    def test_x_rho(self):
        nt.assert_true(hasattr(self.grid, 'x_rho'))
        nptest.assert_array_almost_equal(self.grid.x_rho, self.known_x_rho,
                                         decimal=2)

    def test_y_rho(self):
        nt.assert_true(hasattr(self.grid, 'y_rho'))
        nptest.assert_array_almost_equal(self.grid.y_rho, self.known_y_rho,
                                         decimal=2)

    def test_x_u(self):
        nt.assert_true(hasattr(self.grid, 'x_u'))
        nptest.assert_array_almost_equal(self.grid.x_u, self.known_x_u,
                                         decimal=2)

    def test_y_u(self):
        nt.assert_true(hasattr(self.grid, 'y_u'))
        nptest.assert_array_almost_equal(self.grid.y_u, self.known_y_u,
                                         decimal=2)

    def test_x_v(self):
        nt.assert_true(hasattr(self.grid, 'x_v'))
        nptest.assert_array_almost_equal(self.grid.x_v, self.known_x_v,
                                         decimal=2)

    def test_y_v(self):
        nt.assert_true(hasattr(self.grid, 'y_v'))
        nptest.assert_array_almost_equal(self.grid.y_v, self.known_y_v,
                                         decimal=2)

    def test_xbry(self):
        nt.assert_true(hasattr(self.grid, 'xbry'))
        nptest.assert_array_almost_equal(self.grid.xbry, self.x,
                                         decimal=2)

    def test_ybry(self):
        nt.assert_true(hasattr(self.grid, 'ybry'))
        nptest.assert_array_almost_equal(self.grid.ybry, self.y,
                                         decimal=2)


class test_Grid_basic(_grid_mixin):
    def setup(self):
        self.x = [0.0, 1.0, 2.0, 1.0, 0.0]
        self.y = [0.0, 0.0, 0.5, 1.0, 1.0]
        self.beta = [1.0, 1.0, 0.0, 1.0, 1.0]
        self.shape = (10, 5)
        self.options = {'ul_idx': 0}

        self.grid = self.make_grid()

        self.known_x = np.array([
            [ 1.  ,  1.12,  2.  ,  1.12,  1.  ],
            [ 0.96,  1.03,  1.17,  1.03,  0.96],
            [ 0.87,  0.91,  0.96,  0.91,  0.87],
            [ 0.77,  0.78,  0.8 ,  0.78,  0.77],
            [ 0.65,  0.65,  0.66,  0.65,  0.65],
            [ 0.52,  0.52,  0.53,  0.52,  0.52],
            [ 0.39,  0.39,  0.39,  0.39,  0.39],
            [ 0.26,  0.26,  0.26,  0.26,  0.26],
            [ 0.13,  0.13,  0.13,  0.13,  0.13],
            [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ]
        ])

        self.known_y = np.array([
            [ 0.  ,  0.06,  0.5 ,  0.94,  1.  ],
            [-0.  ,  0.16,  0.5 ,  0.84,  1.  ],
            [-0.  ,  0.21,  0.5 ,  0.79,  1.  ],
            [-0.  ,  0.23,  0.5 ,  0.77,  1.  ],
            [-0.  ,  0.24,  0.5 ,  0.76,  1.  ],
            [-0.  ,  0.25,  0.5 ,  0.75,  1.  ],
            [-0.  ,  0.25,  0.5 ,  0.75,  1.  ],
            [-0.  ,  0.25,  0.5 ,  0.75,  1.  ],
            [-0.  ,  0.25,  0.5 ,  0.75,  1.  ],
            [-0.  ,  0.25,  0.5 ,  0.75,  1.  ]
        ])

        self.known_x_psi = np.array([
            [ 1.03,  1.17,  1.03],
            [ 0.91,  0.96,  0.91],
            [ 0.78,  0.8 ,  0.78],
            [ 0.65,  0.66,  0.65],
            [ 0.52,  0.53,  0.52],
            [ 0.39,  0.39,  0.39],
            [ 0.26,  0.26,  0.26],
            [ 0.13,  0.13,  0.13]
        ])

        self.known_y_psi = np.array([
            [ 0.16,  0.5 ,  0.84],
            [ 0.21,  0.5 ,  0.79],
            [ 0.23,  0.5 ,  0.77],
            [ 0.24,  0.5 ,  0.76],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75]
        ])

        self.known_x_rho = np.array([
            [ 1.03,  1.33,  1.33,  1.03],
            [ 0.94,  1.02,  1.02,  0.94],
            [ 0.83,  0.87,  0.87,  0.83],
            [ 0.71,  0.73,  0.73,  0.71],
            [ 0.59,  0.59,  0.59,  0.59],
            [ 0.46,  0.46,  0.46,  0.46],
            [ 0.33,  0.33,  0.33,  0.33],
            [ 0.2 ,  0.2 ,  0.2 ,  0.2 ],
            [ 0.07,  0.07,  0.07,  0.07]
        ])

        self.known_y_rho = np.array([
            [ 0.05,  0.3 ,  0.7 ,  0.95],
            [ 0.09,  0.34,  0.66,  0.91],
            [ 0.11,  0.36,  0.64,  0.89],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88]
        ])

        self.known_x_u = np.array([
            [ 1.08,  1.58,  1.08],
            [ 0.97,  1.06,  0.97],
            [ 0.85,  0.88,  0.85],
            [ 0.72,  0.73,  0.72],
            [ 0.59,  0.59,  0.59],
            [ 0.46,  0.46,  0.46],
            [ 0.33,  0.33,  0.33],
            [ 0.2 ,  0.2 ,  0.2 ],
            [ 0.07,  0.07,  0.07]
        ])

        self.known_x_v = np.array([
            [ 1.  ,  1.1 ,  1.1 ,  1.  ],
            [ 0.89,  0.94,  0.94,  0.89],
            [ 0.78,  0.79,  0.79,  0.78],
            [ 0.65,  0.66,  0.66,  0.65],
            [ 0.52,  0.53,  0.53,  0.52],
            [ 0.39,  0.39,  0.39,  0.39],
            [ 0.26,  0.26,  0.26,  0.26],
            [ 0.13,  0.13,  0.13,  0.13]
        ])

        self.known_y_u = np.array([
            [ 0.11,  0.5 ,  0.89],
            [ 0.18,  0.5 ,  0.82],
            [ 0.22,  0.5 ,  0.78],
            [ 0.24,  0.5 ,  0.76],
            [ 0.24,  0.5 ,  0.76],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75],
            [ 0.25,  0.5 ,  0.75]
        ])

        self.known_y_v = np.array([
            [ 0.08,  0.33,  0.67,  0.92],
            [ 0.1 ,  0.35,  0.65,  0.9 ],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88],
            [ 0.12,  0.37,  0.63,  0.88]
        ])


class test_Grid_with_focus(_grid_mixin):
    def setup(self):
        self.x = [0.0, 1.0, 2.0, 1.0, 0.0]
        self.y = [0.0, 0.0, 0.5, 1.0, 1.0]
        self.beta = [1.0, 1.0, 0.0, 1.0, 1.0]
        self.shape = (9, 9)

        focus = pygridgen.Focus()
        focus.add_focus_x(0.50, factor=2.0, Rx=3.0)
        focus.add_focus_y(0.75, factor=0.5, Ry=2.0)
        self.options = {'ul_idx': 0, 'focus': focus}

        self.grid = self.make_grid()

        self.known_x = np.array([
            [ 1.  ,  1.04,  1.12,  1.27,  2.  ,  1.27,  1.12,  1.04,  1.  ],
            [ 0.95,  0.97,  1.02,  1.1 ,  1.15,  1.1 ,  1.02,  0.97,  0.95],
            [ 0.86,  0.87,  0.89,  0.92,  0.93,  0.92,  0.89,  0.87,  0.86],
            [ 0.73,  0.74,  0.75,  0.76,  0.76,  0.76,  0.75,  0.74,  0.73],
            [ 0.59,  0.59,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.59,  0.59],
            [ 0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45],
            [ 0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ],
            [ 0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15],
            [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ]
        ])

        self.known_y = np.array([
            [ 0.  ,  0.02,  0.06,  0.14,  0.5 ,  0.86,  0.94,  0.98,  1.  ],
            [-0.  ,  0.07,  0.16,  0.3 ,  0.5 ,  0.7 ,  0.84,  0.93,  1.  ],
            [-0.  ,  0.1 ,  0.21,  0.35,  0.5 ,  0.65,  0.79,  0.9 ,  1.  ],
            [-0.  ,  0.12,  0.24,  0.37,  0.5 ,  0.63,  0.76,  0.88,  1.  ],
            [-0.  ,  0.12,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.88,  1.  ],
            [-0.  ,  0.12,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.88,  1.  ],
            [-0.  ,  0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87,  1.  ],
            [-0.  ,  0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87,  1.  ],
            [-0.  ,  0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87,  1.  ]
        ])

        self.known_x_psi = np.array([
            [ 0.97,  1.02,  1.1 ,  1.15,  1.1 ,  1.02,  0.97],
            [ 0.87,  0.89,  0.92,  0.93,  0.92,  0.89,  0.87],
            [ 0.74,  0.75,  0.76,  0.76,  0.76,  0.75,  0.74],
            [ 0.59,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.59],
            [ 0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45],
            [ 0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ],
            [ 0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15]
        ])

        self.known_y_psi = np.array([
            [ 0.07,  0.16,  0.3 ,  0.5 ,  0.7 ,  0.84,  0.93],
            [ 0.1 ,  0.21,  0.35,  0.5 ,  0.65,  0.79,  0.9 ],
            [ 0.12,  0.24,  0.37,  0.5 ,  0.63,  0.76,  0.88],
            [ 0.12,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.88],
            [ 0.12,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.88],
            [ 0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87],
            [ 0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87]
        ])

        self.known_x_rho = np.array([
            [ 0.99,  1.04,  1.13,  1.38,  1.38,  1.13,  1.04,  0.99],
            [ 0.91,  0.94,  0.98,  1.02,  1.02,  0.98,  0.94,  0.91],
            [ 0.8 ,  0.81,  0.83,  0.84,  0.84,  0.83,  0.81,  0.8 ],
            [ 0.66,  0.67,  0.68,  0.68,  0.68,  0.68,  0.67,  0.66],
            [ 0.52,  0.52,  0.52,  0.53,  0.53,  0.52,  0.52,  0.52],
            [ 0.37,  0.37,  0.37,  0.37,  0.37,  0.37,  0.37,  0.37],
            [ 0.22,  0.22,  0.22,  0.22,  0.22,  0.22,  0.22,  0.22],
            [ 0.07,  0.07,  0.07,  0.07,  0.07,  0.07,  0.07,  0.07]
        ])

        self.known_y_rho = np.array([
            [ 0.02,  0.08,  0.16,  0.36,  0.64,  0.84,  0.92,  0.98],
            [ 0.04,  0.14,  0.26,  0.41,  0.59,  0.74,  0.86,  0.96],
            [ 0.05,  0.17,  0.29,  0.43,  0.57,  0.71,  0.83,  0.95],
            [ 0.06,  0.18,  0.3 ,  0.43,  0.57,  0.7 ,  0.82,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94]
        ])

        self.known_x_u = np.array([
            [ 1.  ,  1.07,  1.19,  1.57,  1.19,  1.07,  1.  ],
            [ 0.92,  0.96,  1.01,  1.04,  1.01,  0.96,  0.92],
            [ 0.8 ,  0.82,  0.84,  0.85,  0.84,  0.82,  0.8 ],
            [ 0.66,  0.67,  0.68,  0.68,  0.68,  0.67,  0.66],
            [ 0.52,  0.52,  0.53,  0.53,  0.53,  0.52,  0.52],
            [ 0.37,  0.37,  0.37,  0.38,  0.37,  0.37,  0.37],
            [ 0.22,  0.22,  0.22,  0.22,  0.22,  0.22,  0.22],
            [ 0.07,  0.07,  0.07,  0.07,  0.07,  0.07,  0.07]
        ])

        self.known_x_v = np.array([
            [ 0.96,  1.  ,  1.06,  1.12,  1.12,  1.06,  1.  ,  0.96],
            [ 0.86,  0.88,  0.9 ,  0.92,  0.92,  0.9 ,  0.88,  0.86],
            [ 0.73,  0.74,  0.75,  0.76,  0.76,  0.75,  0.74,  0.73],
            [ 0.59,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.6 ,  0.59],
            [ 0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45,  0.45],
            [ 0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ,  0.3 ],
            [ 0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15,  0.15]
        ])

        self.known_y_u = np.array([
            [ 0.04,  0.11,  0.22,  0.5 ,  0.78,  0.89,  0.96],
            [ 0.09,  0.19,  0.32,  0.5 ,  0.68,  0.81,  0.91],
            [ 0.11,  0.23,  0.36,  0.5 ,  0.64,  0.77,  0.89],
            [ 0.12,  0.24,  0.37,  0.5 ,  0.63,  0.76,  0.88],
            [ 0.12,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.88],
            [ 0.13,  0.25,  0.37,  0.5 ,  0.63,  0.75,  0.87],
            [ 0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87],
            [ 0.13,  0.25,  0.38,  0.5 ,  0.62,  0.75,  0.87]
        ])

        self.known_y_v = np.array([
            [ 0.04,  0.12,  0.23,  0.4 ,  0.6 ,  0.77,  0.88,  0.96],
            [ 0.05,  0.16,  0.28,  0.42,  0.58,  0.72,  0.84,  0.95],
            [ 0.06,  0.18,  0.3 ,  0.43,  0.57,  0.7 ,  0.82,  0.94],
            [ 0.06,  0.18,  0.31,  0.44,  0.56,  0.69,  0.82,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94],
            [ 0.06,  0.19,  0.31,  0.44,  0.56,  0.69,  0.81,  0.94]
        ])
